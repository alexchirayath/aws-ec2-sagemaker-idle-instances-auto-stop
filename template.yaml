AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  ResourcesToBeScanned:
    Type: String
    Description: Specify the resources to be scanned by IIAS
    AllowedValues: [EC2&SageMaker,EC2,SageMaker]
  NotificationEmail:
    Type: String
    Description: Email for notifying actions taken on EC2 instance. 
    AllowedPattern: (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
  ScanReccurrencePeriod:
    Type: String
    Description: Period you want to IIAS to scan for new instances and apply the CW alarms(for EC2) / Lifecycle Config (for SageMaker). Note - On SageMaker notebooks, any running instance that is not opted out / has a lifecycle config will be stopped. 
    AllowedValues: [Daily,Weekday,Weekend,Saturday,Sunday,Monday,Tuesday,Wednesday,Thursday,Friday]
  ScanTimeHourUTC:
    Type: Number
    Description: Specify the hour for when IIAS should scan in UTC
    MinValue: 0
    MaxValue: 23
  ScanTimeMinuteUTC:
    Type: Number
    Description: Specify the minute for when IIAS should scan in UTC
    MinValue: 0
    MaxValue: 59
  EC2IdleHourTimeout:
    Type: Number
    Description: Specify the no. of idle hours after which you want the EC2 instances to be shut down 
    MinValue: 1
    MaxValue: 72
  SageMakerIdleHourTimeout:
    Type: Number
    Description: Specify the no. of idle hours after which you want the SageMaker instances to be shut down 
    MinValue: 1
    MaxValue: 72
Conditions: 
  ScanResourceEC2:
    Fn::Or: [!Equals [ !Ref ResourcesToBeScanned, EC2 ],!Equals [ !Ref ResourcesToBeScanned, EC2&SageMaker ]] 
  ScanResourceSageMaker:
    Fn::Or: [!Equals [ !Ref ResourcesToBeScanned, SageMaker ],!Equals [ !Ref ResourcesToBeScanned, EC2&SageMaker ]]   
Mappings: 
  ReccurrenceToCron: 
    Daily: 
      Value: '*'
    Monday: 
      Value: 'MON'
    Tuesday: 
      Value: 'TUE'
    Wednesday: 
      Value: 'WED'
    Thursday: 
      Value: 'THU'
    Friday: 
      Value: 'FRI'
    Saturday: 
      Value: 'SAT'
    Sunday: 
      Value: 'SUN'
    Weekday: 
      Value: 'MON-FRI'
    Weekend: 
      Value: 'SAT-SUN'
Globals:
  Function:
    Runtime: python3.8
    MemorySize: 256
    Timeout: 900

Resources:
  IIASUpdateEC2CWAlarms:
    Condition: ScanResourceEC2
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: updateEC2CWAlarms.handler
      Environment:
        Variables:
          SNSTopicArn : !Ref IIASNS
          IdleTimeHour: !Ref EC2IdleHourTimeout
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt [IIASNS ,TopicName]
        - Statement:
          - Sid: IASCWCRUDPolicy
            Effect: Allow
            Action:
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
            Resource: "*"
          - Sid: IASKMSUsagePolicy
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: !GetAtt [IIASEncryptionKey, Arn]
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            FilterPolicy:
              notificationFor:
              - IIAS_EC2
            Topic: !Ref IIASNS


  IIASNS:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !GetAtt [IIASEncryptionKey,Arn]
  
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref IIASNS
      FilterPolicy:
        notificationFor:
        - IIAS_EMAIL

  IIASSagemakerGatherInfo:
    Condition: ScanResourceSageMaker
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: gatherSagemakerInfo.handler
      Policies:
        - Statement:
          - Sid: IASEC2DescribePolicy
            Effect: Allow
            Action:
              - ec2:DescribeRegions
              - ec2:DescribeInstances
            Resource: "*"
          - Sid: IASSSMPolicy
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
            Resource: "*"
          - Sid: IASSageMakerMPolicy
            Effect: Allow
            Action:
              - sagemaker:ListNotebookInstances
              - sagemaker:ListTags
              - sagemaker:StopNotebookInstance
            Resource: "*"
          - Sid: IASKMSUsagePolicy3
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: !GetAtt [IIASEncryptionKey, Arn]
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt [IIASNS ,TopicName]
      Events:
        PeriodicCheck:
          Type: Schedule
          Properties:
            Schedule: 
              !Join
                - ""
                - - "cron("
                  - !Ref ScanTimeMinuteUTC
                  - " "
                  - !Ref ScanTimeHourUTC
                  - " "
                  - "?"
                  - " "
                  - "*"
                  - " "
                  - !FindInMap [ReccurrenceToCron, !Ref ScanReccurrencePeriod, Value]
                  - " "
                  - "*"
                  - ")"
      Environment:
        Variables:
          SNSTopicArn : !Ref IIASNS

  IIASUpdateSagemakerInstances:
    Condition: ScanResourceSageMaker
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: updateSagemakerInstances.handler
      Environment:
        Variables:
          SNSTopicArn : !Ref IIASNS
          IdleTimeHour: !Ref SageMakerIdleHourTimeout
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt [IIASNS ,TopicName]
        - Statement:
          - Sid: IASKMSUsagePolicy4
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: !GetAtt [IIASEncryptionKey, Arn]
        - Statement:
          - Sid: IASKMSUsagePolicy4
            Effect: Allow
            Action:
              - sagemaker:UpdateNotebookInstance
              - sagemaker:ListNotebookInstanceLifecycleConfigs
              - sagemaker:CreateNotebookInstanceLifecycleConfig
            Resource: "*"
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            FilterPolicy:
              notificationFor:
              - IIAS_SAGEMAKER
            Topic: !Ref IIASNS

  IIASEC2GatherInfo:
    Condition: ScanResourceEC2
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: gatherEC2Info.handler
      Policies:
        - Statement:
          - Sid: IASEC2DescribePolicy
            Effect: Allow
            Action:
              - ec2:DescribeRegions
              - ec2:DescribeInstances
            Resource: "*"
          - Sid: IASKMSUsagePolicy2
            Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: !GetAtt [IIASEncryptionKey, Arn]
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt [IIASNS ,TopicName]
      Events:
        PeriodicCheck:
          Type: Schedule
          Properties:
            Schedule: 
              !Join
                - ""
                - - "cron("
                  - !Ref ScanTimeMinuteUTC
                  - " "
                  - !Ref ScanTimeHourUTC
                  - " "
                  - "?"
                  - " "
                  - "*"
                  - " "
                  - !FindInMap [ReccurrenceToCron, !Ref ScanReccurrencePeriod, Value]
                  - " "
                  - "*"
                  - ")"
      Environment:
        Variables:
          SNSTopicArn : !Ref IIASNS
  
  IIASEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
          Version: '2012-10-17'
          Statement:
          - Resource: "*"
            Principal:
              AWS:
                Fn::Join:
                - ''
                - - 'arn:aws:iam::'
                  - Ref: AWS::AccountId
                  - ":root"
            Effect: Allow
            Sid: Enable IAM User Permissions
            Action: kms:*
